" asm_lsp.vim - x86_64 ASM & C LSP Cheatsheet (foldable, no explicações)
" Coloque em ~/.vim/vimdoc/ e carregue via :source ou autocmd

setlocal foldmethod=marker
setlocal syntax=asm

" ==== REGISTRADORES GERAIS {{{
rax rbx rcx rdx rsi rdi rbp rsp
r8 r9 r10 r11 r12 r13 r14 r15
eax ebx ecx edx esi edi ebp esp
ax bx cx dx si di bp sp
al bl cl dl ah bh ch dh
rip eip ip
eflags rflags
cs ds es fs gs ss
cr0 cr2 cr3 cr4
dr0–dr7
mm0–mm7
xmm0–xmm15
ymm0–ymm15
zmm0–zmm31
" }}}

" ==== ENDEREÇOS DE MEMÓRIA COMUNS {{{
0x00000000 — NULL
0x00007FFFFFFFFFFF — topo user-space
0x0000000000400000 — start .text
0x0000000000600000 — start .data
0x0000000000601000 — .bss
0x7fffffffe000 — stack base (usuário)
0xffffffffff600000 — vsyscall
0x08048000 — ELF entrypoint clássico
0xdeadbeef — placeholder
0xc0000000 — kernel start (32-bit)
0xffffffff81000000 — kernel base (64-bit)
" }}}

" ==== PREFIXOS (OPCODES MODIFICADORES) {{{
lock rep repe repne
cs ds es fs gs ss
operand-size override: 0x66
address-size override: 0x67
rex prefixes: rex, rex.w, rex.r, rex.x, rex.b
" }}}

" ==== ARGUMENTOS NA CHAMADA System V {{{
; Ordem de argumentos (int/funções C em asm):
rdi, rsi, rdx, rcx, r8, r9
; Argumentos float: xmm0–xmm7
; Retorno: rax
; Stack aligned em 16 bytes
" }}}

" ==== INSTRUÇÕES COMUNS (sem explicação) {{{
mov add sub mul imul div idiv
and or xor not neg
inc dec
shl shr sar sal
cmp test
jmp je jne jg jl jge jle ja jb
call ret
push pop
lea
nop
int syscall
xchg bswap
seta setae setb setbe sete setne
cmova cmovb cmovg cmovl
hlt cli sti
" }}}

" ==== TIPOLOGIA C INTERESSANTE PRA ASM {{{
sizeof(char) = 1
sizeof(short) = 2
sizeof(int) = 4
sizeof(long) = 8
sizeof(void*) = 8

alignas(16) → alinhamento de vetor
char*, int*, void*, struct*

main(int argc, char** argv)
→ argc = rdi, argv = rsi
→ *argv = ponteiro ptr char** → strings da linha de comando

STACK GROWS DOWN
" }}}

" ==== INSTRUÇÕES SIMD/MMX/SSE/AVX (nomes apenas) {{{
movdqa movaps movss movsd
addps addpd
subps subpd
mulps mulpd
divps divpd
sqrtps sqrtpd
andps orps xorps
pxor paddb paddw paddd paddq
pslld pslldq psrld psrlw psrlq
vaddps vsubps vmulps vdivps
vpaddb vpaddw vpaddd
" }}}

" ==== FLAGS MODIFICADAS PELAS INSTRUÇÕES {{{
CF ZF SF OF PF AF
→ modificadas por: add, sub, cmp, inc, dec, mul, div
→ verificadas por: je, jne, jg, jl, jc, jo, jp
" }}}

" ==== REGIÕES ELF (útil para binários custom) {{{
.text
.data
.bss
.rodata
.stack
.heap
.dynsym .plt .got
.rel.plt .rel.dyn
" }}}

" ==== COMMON STRUCTS & C ABI POINTERS {{{
struct node {
    int val;
    struct node* next;
}

→ em ASM: valor = [rdi], ponteiro next = [rdi + 8]
" }}}

